# __init__.py# Copyright (C) 2025 ['chai chaimee']# Licensed under GNU General Public License. See COPYING.txt for details.import globalPluginHandlerimport scriptHandlerimport uiimport tonesimport apiimport wximport guiimport coreimport addonHandlerimport globalVarsimport textInfosfrom . import siamSquareCorefrom . import settingManagerfrom . import siamCenterfrom functools import wrapsaddonHandler.initTranslation()def finally_(func, final):    """Calls final after func, even if it fails."""    @wraps(func)    def new(*args, **kwargs):        try:            func(*args, **kwargs)        finally:            final()    return newclass GlobalPlugin(globalPluginHandler.GlobalPlugin):    scriptCategory = _("Siam Square")        def __init__(self):        super(GlobalPlugin, self).__init__()        if globalVars.appArgs.secure:            return                    self.settingManager = settingManager.SettingManager()        self.siamSquareCore = siamSquareCore.SiamSquareCore(self.settingManager)        self.toggling = False    def getScript(self, gesture):        if not self.toggling:            return globalPluginHandler.GlobalPlugin.getScript(self, gesture)        script = globalPluginHandler.GlobalPlugin.getScript(self, gesture)        if not script:            script = finally_(self.script_error, self.finish)        return finally_(script, self.finish)    def script_error(self, gesture):        ui.message(_("Layered mode: ไม่มีคำสั่ง"))        tones.beep(120, 100)    def finish(self):        if self.toggling:            self.toggling = False            self.clearGestureBindings()            self.bindGestures(self.__gestures)    @scriptHandler.script(        description=_("Siam Square Mode"),        category=scriptCategory,        gestures=["kb:control+f1"]    )    def script_activateLayeredCommands(self, gesture):        if self.toggling:            self.finish()            ui.message(_("ออกจาก Layered mode"))            return                    self.toggling = True        self.clearGestureBindings()        self.bindGestures(self.__layeredGestures)        tones.beep(100, 100)    @scriptHandler.script(        description=_("ความหมายคำ"),        category=scriptCategory    )    def script_layeredCommandT(self, gesture):        selectedText = self.getSelectedText()        if selectedText:            self.siamSquareCore.announceWordDefinition(selectedText)        else:            ui.message(_("ไม่ได้เลือกข้อความ"))    @scriptHandler.script(        description=_("คำใกล้เคียง"),        category=scriptCategory    )    def script_layeredCommandC(self, gesture):        selectedText, textInfo = self.getSelectedTextAndInfo()        if not selectedText:            ui.message(_("ไม่ได้เลือกข้อความหรือไม่มีคำที่ตำแหน่งเคอร์เซอร์"))            return        self.siamSquareCore.showWordSuggestionsDialog(textInfo, selectedText)    @scriptHandler.script(        description=_("สะกดคำ"),        category=scriptCategory    )    def script_layeredCommandS(self, gesture):        selectedText = self.getSelectedText()        if selectedText:            self.siamSquareCore.spellWord(selectedText)        else:            ui.message(_("ไม่ได้เลือกข้อความ"))    @scriptHandler.script(        description=_("Siam Center"),        category=scriptCategory    )    def script_openSiamCenter(self, gesture):        selectedText = self.getSelectedText()        try:            # Use wx.CallAfter to ensure dialog is shown in the main thread            wx.CallAfter(self._showSiamCenterDialog, selectedText)        except Exception as e:            ui.message(_("ไม่สามารถเปิด Siam Center ได้: {}").format(str(e)))    def _showSiamCenterDialog(self, selectedText):        """Safely show the SiamCenterDialog in the main thread"""        try:            # Ensure the dialog is created and shown on the main thread            if hasattr(gui.mainFrame, 'popupSettingsDialog'):                gui.mainFrame.popupSettingsDialog(siamCenter.SiamCenterDialog, selectedText)            else:                gui.mainFrame._popupSettingsDialog(siamCenter.SiamCenterDialog, selectedText)            # Ensure the dialog is brought to the foreground            wx.CallLater(100, self._focusDialog)        except Exception as e:            ui.message(_("ไม่สามารถเปิด Siam Center ได้: {}").format(str(e)))    def _focusDialog(self):        """Attempt to focus the dialog window"""        try:            # Find the dialog window and bring it to the foreground            dialog = wx.GetActiveWindow()            if dialog and isinstance(dialog, siamCenter.SiamCenterDialog):                dialog.Raise()                dialog.SetFocus()        except Exception as e:            print(f"Error focusing dialog: {e}")    def getSelectedText(self):        """Get selected text using method inspired by InstantTranslate for better compatibility with web browsers and text editors"""        # Try focus object first (works in text editors)        obj = api.getFocusObject()        try:            info = obj.makeTextInfo(textInfos.POSITION_SELECTION)            if info and not info.isCollapsed:                text = info.text                if text and not text.isspace():                    return text.strip()        except (RuntimeError, NotImplementedError):            pass                # Fallback to caret object (works in web browsers)        obj = api.getCaretObject()        try:            info = obj.makeTextInfo(textInfos.POSITION_SELECTION)            if info and not info.isCollapsed:                text = info.text                if text and not text.isspace():                    return text.strip()        except (RuntimeError, NotImplementedError):            pass                return None    def getSelectedTextAndInfo(self):        """Get selected text and textInfo object for replacement operations"""        # Try focus object first (works in text editors)        obj = api.getFocusObject()        try:            info = obj.makeTextInfo(textInfos.POSITION_SELECTION)            if info and not info.isCollapsed:                selectedText = info.text                if selectedText and not selectedText.isspace():                    return selectedText.strip(), info        except (RuntimeError, NotImplementedError):            pass                # Fallback to caret object (works in web browsers)        obj = api.getCaretObject()        try:            info = obj.makeTextInfo(textInfos.POSITION_SELECTION)            if info and not info.isCollapsed:                selectedText = info.text                if selectedText and not selectedText.isspace():                    return selectedText.strip(), info        except (RuntimeError, NotImplementedError):            pass                # Fallback to current word under caret using focus object        try:            info = obj.makeTextInfo(textInfos.POSITION_CARET)            info.expand(textInfos.UNIT_WORD)            selectedText = info.text.strip()            if selectedText:                return selectedText, info        except (RuntimeError, NotImplementedError):            pass                return None, None            __layeredGestures = {        "kb:1": "layeredCommandT",        "kb:2": "layeredCommandC",         "kb:3": "layeredCommandS",        "kb:4": "openSiamCenter",    }        __gestures = {        "kb:control+f1": "activateLayeredCommands",    }